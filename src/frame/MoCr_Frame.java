/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import core.*;
/**
 *
 * @author Jonas
 */
public class MoCr_Frame extends javax.swing.JFrame {
    /**
     * Creates new form MoCr_Frame
     */
    String myFont = "Comic Sans MS"; //Variable für Font
    MoCr_Frame_Credits localCredits;        //lokale Impressumsinstanz    
    MoCr_Frame_Support localSupport;        //lokale Hilfsinstanz
    MoCr_Frame_Settings localSettings;
    MoCr_Frame_exc localExc;
    Core localCore;                         //lokale Core-Instanz
    static CommTools localTools = new CommTools();
    WindowLogic localLogic = new WindowLogic();
    HtmlReader localDidViewer;
    
    
    public MoCr_Frame() {
        initComponents();   //Initialisierung der Fensterkomponente
        localCredits = new MoCr_Frame_Credits();    //Initialisierung der lokalen Impressumsinstanz
        localSupport = new MoCr_Frame_Support(this);
        localCore = new Core();     //Core wird initialisiert
        localLogic.setIdentificationPair(0, 0);
        localLogic.setMode(true);
        localSettings = new MoCr_Frame_Settings(this);
        localDidViewer = new HtmlReader(MoCr_Did_HTMLView);
        localDidViewer.insertHTML(0, true);
        localExc = new MoCr_Frame_exc();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MoCr_SpielsprachenMP_Grouper = new javax.swing.ButtonGroup();
        MoCr_CodierungenMp_Grouper = new javax.swing.ButtonGroup();
        MoCr_TranspositionMP_Grouper = new javax.swing.ButtonGroup();
        MoCr_SteganoMP_Grouper = new javax.swing.ButtonGroup();
        MoCr_Gen_DynamicPanel = new javax.swing.JPanel();
        MoCr_MainPro_cardPanel = new javax.swing.JPanel();
        MoCr_MainPro_static_IOpanel = new javax.swing.JPanel();
        MoCr_MPstaticIO_Heading = new javax.swing.JLabel();
        MoCr_MPstaticIO_ScrollerOut = new javax.swing.JScrollPane();
        MoCr_MPstaticIO_OutField = new javax.swing.JTextArea();
        MoCr_MPstaticIO_ScrollerIn = new javax.swing.JScrollPane();
        MoCr_MPstaticIO_InField = new javax.swing.JTextArea();
        MoCr_MPstaticIO_InHeading = new javax.swing.JLabel();
        MoCr_MPstaticIO_OutHeading = new javax.swing.JLabel();
        MoCr_MainPro_changeable = new javax.swing.JPanel();
        MoCr_MPSub_Caesar = new javax.swing.JPanel();
        MoCr_CaesarSub_Heading = new javax.swing.JLabel();
        MoCr_CaesarSub_LabelSchlüssel = new javax.swing.JLabel();
        MoCr_Caesar_EingabefeldSchlüssel = new javax.swing.JTextField();
        MoCr_CaesarSub_DiscBack = new javax.swing.JLabel();
        MoCr_MPSub_Multiplikativ = new javax.swing.JPanel();
        MoCr_MultiplikativSub_Heading = new javax.swing.JLabel();
        MoCr_MultiplikaitvSub_KeyPointer = new javax.swing.JLabel();
        MoCr_MultiplikativSub_KeyField = new javax.swing.JTextField();
        MoCr_MultiplikaitvSub_KeyGenButton = new javax.swing.JButton();
        MoCr_MPSub_Vigenere = new javax.swing.JPanel();
        MoCr_VigenereSub_Heading = new javax.swing.JLabel();
        MoCr_VigenereSub_Image = new javax.swing.JLabel();
        MoCr_VigenereSub_LabelSchlüssel = new javax.swing.JLabel();
        MoCr_VigenereSub_EingabefeldSchlüssel = new javax.swing.JTextField();
        MoCr_MPSub_Enigma = new javax.swing.JPanel();
        MoCr_EnigmaSub_Heading = new javax.swing.JLabel();
        MoCr_MPSub_OTP = new javax.swing.JPanel();
        MoCr_MPSub_OTP_Testlabel = new javax.swing.JLabel();
        MoCr_OTPSub_LabelSchlüssel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MoCr_OTPSub_Area = new javax.swing.JTextArea();
        MoCr_OTPSub_Generator = new javax.swing.JButton();
        MoCr_MPSub_Transposition = new javax.swing.JPanel();
        MoCr_TranspositionSub_Heading = new javax.swing.JLabel();
        MoCr_TranspositionSub_SpaltelButton = new javax.swing.JRadioButton();
        MoCr_TranspositionSub_GartenzaunButton = new javax.swing.JRadioButton();
        MoCr_TranspositionSub_AnagrammButton = new javax.swing.JRadioButton();
        MoCr_TranspositionSub_DoppelwürfelButton = new javax.swing.JRadioButton();
        MoCr_TranspositionSub_PermutaButton = new javax.swing.JRadioButton();
        MoCr_TranspositionSub_KeyPanel = new javax.swing.JPanel();
        MoCr_TranspositionSub_1Key = new javax.swing.JPanel();
        MoCr_TranspositionKey_1KeyLabel = new javax.swing.JLabel();
        MoCr_TranspositionKey_1KeyField = new javax.swing.JTextField();
        MoCr_TranspositionSub_2Key = new javax.swing.JPanel();
        MoCr_TranspositionSub_2KeyLabel = new javax.swing.JLabel();
        MoCr_TranspositionSub_2KeyField1 = new javax.swing.JTextField();
        MoCr_TranspositionSub_2KeyField2 = new javax.swing.JTextField();
        MoCr_TranspositionSub_MatrixKey = new javax.swing.JPanel();
        MoCr_TranspositionSub_MatrixKeyLabel = new javax.swing.JLabel();
        MoCr_TranspositionSub_MatrixKeyField = new javax.swing.JTable();
        MoCr_PermSub_MinVal = new javax.swing.JLabel();
        MoCr_PermSub_MaxVal = new javax.swing.JLabel();
        MoCr_PermSub_Slider = new javax.swing.JSlider();
        MoCr_PermSub_Label = new javax.swing.JLabel();
        MoCr_PermSub_ValueLabel = new javax.swing.JLabel();
        MoCr_TranspositionSub_NoKey = new javax.swing.JPanel();
        MoCr_MPSub_Codierungen = new javax.swing.JPanel();
        MoCr_CodierungenSub_Heading = new javax.swing.JLabel();
        MoCr_CodierungenSub_MorseButton = new javax.swing.JRadioButton();
        MoCr_CodierungenSub_ASCIIButton = new javax.swing.JRadioButton();
        MoCr_CodierungenSub_BinärButton = new javax.swing.JRadioButton();
        MoCr_CodierungenSub_AlphaButton = new javax.swing.JRadioButton();
        MoCr_CodierungenSub_ADFGXButton = new javax.swing.JRadioButton();
        MoCr_ADFGX_Scroller = new javax.swing.JScrollPane();
        MoCr_ADFGX_Matrix = new javax.swing.JTable();
        MoCr_CodierungenSub_BinToHexButton = new javax.swing.JRadioButton();
        MoCr_CodierungenSub_NATOButton = new javax.swing.JRadioButton();
        MoCr_CodierungenSub_ADFGXFiller = new javax.swing.JButton();
        MoCr_MPSub_Spielsprachen = new javax.swing.JPanel();
        MoCr_SpielsprachenSub_Heading = new javax.swing.JLabel();
        MoCr_SpielsprachenMP_BiButton = new javax.swing.JRadioButton();
        MoCr_SpielsprachenMP_BobButton = new javax.swing.JRadioButton();
        MoCr_SpielsprachenMP_LöffelButton = new javax.swing.JRadioButton();
        MoCr_MPSub_Hill = new javax.swing.JPanel();
        MoCr_HillSub_Heading = new javax.swing.JLabel();
        MoCr_HillSub_Matrix = new javax.swing.JTable();
        MoCr_HillSub_Slider = new javax.swing.JSlider();
        MoCr_HillSub_MinLab = new javax.swing.JLabel();
        MoCr_HillSub_MaxLab = new javax.swing.JLabel();
        MoCr_HillSub_SizeLab = new javax.swing.JLabel();
        MoCr_HillSub_Size = new javax.swing.JLabel();
        MoCr_MPSub_Steganographie = new javax.swing.JPanel();
        MoCr_SteganoSub_Heading = new javax.swing.JLabel();
        MoCr_SteganoSub_BaconButton = new javax.swing.JRadioButton();
        MoCr_SteganoSub_PseudoButton = new javax.swing.JRadioButton();
        MoCr_SteganoSub_BaconKeyHeading = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        MoCr_SteganoSub_BaconKey = new javax.swing.JTextArea();
        MoCr_MPSub_AffineChiffre = new javax.swing.JPanel();
        MoCr_AffiChiffSub_Heading = new javax.swing.JLabel();
        MoCr_AffChiffSub_KeyLabel = new javax.swing.JLabel();
        MoCr_AffChiffSub_Key1 = new javax.swing.JTextField();
        MoCr_AffChiffSub_Key2 = new javax.swing.JTextField();
        MoCr_AffChiffSub_mLabel = new javax.swing.JLabel();
        MoCr_AffChiffSub_tLabel = new javax.swing.JLabel();
        MoCr_AffChiffSub_Functionpointer = new javax.swing.JLabel();
        MoCr_AffChiffSub_FuncPre = new javax.swing.JLabel();
        MoCr_AffChiffSub_Function = new javax.swing.JLabel();
        MoCr_MPSub_Kryptoanalyse = new javax.swing.JPanel();
        MoCr_KryptoanalyseSub_Heading = new javax.swing.JLabel();
        MoCr_KryptoanalyseSub_ComboBox = new javax.swing.JComboBox<>();
        MoCr_Did_cardPanel = new javax.swing.JPanel();
        MoCr_Did_Returnerbutton = new javax.swing.JButton();
        MoCr_Did_Scrollpanel = new javax.swing.JScrollPane();
        MoCr_Did_HTMLView = new javax.swing.JEditorPane();
        MoCr_Gen_ListPanel = new javax.swing.JPanel();
        MoCr_GenDyn_MainProList = new javax.swing.JPanel();
        MoCr_Gen_Sidelist = new javax.swing.JScrollPane();
        MoCr_Gen_Sidelister = new javax.swing.JList<>();
        MoCr_MPButtonpanel_Crypter = new javax.swing.JButton();
        MoCr_MPButtonpanel_Decrypter = new javax.swing.JButton();
        MoCr_MPButtonpanel_LearnButton = new javax.swing.JButton();
        MoCr_MPButtonpanel_ExerciseButton = new javax.swing.JButton();
        MoCr_MPButtonpanel_IOChange = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        MoCr_GenDyn_DidListPanel = new javax.swing.JPanel();
        MoCr_Gen_DidList = new javax.swing.JScrollPane();
        MoCr_Gen_DidLister = new javax.swing.JList<>();
        MoCr_Gen_Choicebar = new javax.swing.JMenuBar();
        MoCr_Gen_Choicemenu1 = new javax.swing.JMenu();
        MoCr_Gen_Choicemenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(870, 600));
        setName("MoCr_Frame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(600, 450));

        MoCr_Gen_DynamicPanel.setLayout(new java.awt.CardLayout());

        MoCr_MainPro_cardPanel.setBackground(new java.awt.Color(255, 255, 0));

        MoCr_MainPro_static_IOpanel.setOpaque(false);

        MoCr_MPstaticIO_Heading.setFont(new java.awt.Font("Constantia", 2, 18)); // NOI18N
        MoCr_MPstaticIO_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_MPstaticIO_Heading.setText("MonkeyCrypt");

        MoCr_MPstaticIO_OutField.setColumns(20);
        MoCr_MPstaticIO_OutField.setLineWrap(true);
        MoCr_MPstaticIO_OutField.setRows(5);
        MoCr_MPstaticIO_OutField.setWrapStyleWord(true);
        MoCr_MPstaticIO_ScrollerOut.setViewportView(MoCr_MPstaticIO_OutField);

        MoCr_MPstaticIO_InField.setColumns(20);
        MoCr_MPstaticIO_InField.setLineWrap(true);
        MoCr_MPstaticIO_InField.setRows(5);
        MoCr_MPstaticIO_InField.setWrapStyleWord(true);
        MoCr_MPstaticIO_ScrollerIn.setViewportView(MoCr_MPstaticIO_InField);

        MoCr_MPstaticIO_InHeading.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_MPstaticIO_InHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_MPstaticIO_InHeading.setText("Eingabe");

        MoCr_MPstaticIO_OutHeading.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_MPstaticIO_OutHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_MPstaticIO_OutHeading.setText("Ausgabe");

        javax.swing.GroupLayout MoCr_MainPro_static_IOpanelLayout = new javax.swing.GroupLayout(MoCr_MainPro_static_IOpanel);
        MoCr_MainPro_static_IOpanel.setLayout(MoCr_MainPro_static_IOpanelLayout);
        MoCr_MainPro_static_IOpanelLayout.setHorizontalGroup(
            MoCr_MainPro_static_IOpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MoCr_MainPro_static_IOpanelLayout.createSequentialGroup()
                .addGroup(MoCr_MainPro_static_IOpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(MoCr_MPstaticIO_ScrollerOut, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(MoCr_MPstaticIO_OutHeading, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_MPstaticIO_ScrollerIn, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MoCr_MPstaticIO_InHeading, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_MPstaticIO_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        MoCr_MainPro_static_IOpanelLayout.setVerticalGroup(
            MoCr_MainPro_static_IOpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MainPro_static_IOpanelLayout.createSequentialGroup()
                .addComponent(MoCr_MPstaticIO_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_MPstaticIO_InHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_MPstaticIO_ScrollerIn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_MPstaticIO_OutHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_MPstaticIO_ScrollerOut))
        );

        MoCr_MainPro_changeable.setOpaque(false);
        MoCr_MainPro_changeable.setLayout(new java.awt.CardLayout());

        MoCr_MPSub_Caesar.setOpaque(false);

        MoCr_CaesarSub_Heading.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_CaesarSub_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_CaesarSub_Heading.setText("Caesar");

        MoCr_CaesarSub_LabelSchlüssel.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_CaesarSub_LabelSchlüssel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        MoCr_CaesarSub_LabelSchlüssel.setText("Schlüsselbuchstabe:");

        MoCr_Caesar_EingabefeldSchlüssel.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_Caesar_EingabefeldSchlüssel.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        MoCr_CaesarSub_DiscBack.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_CaesarSub_DiscBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/graphics/Drehscheibe/Drehscheibe-Bild 2.png"))); // NOI18N

        javax.swing.GroupLayout MoCr_MPSub_CaesarLayout = new javax.swing.GroupLayout(MoCr_MPSub_Caesar);
        MoCr_MPSub_Caesar.setLayout(MoCr_MPSub_CaesarLayout);
        MoCr_MPSub_CaesarLayout.setHorizontalGroup(
            MoCr_MPSub_CaesarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_CaesarSub_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(MoCr_MPSub_CaesarLayout.createSequentialGroup()
                .addComponent(MoCr_CaesarSub_LabelSchlüssel, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_Caesar_EingabefeldSchlüssel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(256, Short.MAX_VALUE))
            .addComponent(MoCr_CaesarSub_DiscBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        MoCr_MPSub_CaesarLayout.setVerticalGroup(
            MoCr_MPSub_CaesarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_CaesarLayout.createSequentialGroup()
                .addComponent(MoCr_CaesarSub_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_CaesarSub_DiscBack, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MoCr_MPSub_CaesarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MoCr_CaesarSub_LabelSchlüssel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MoCr_Caesar_EingabefeldSchlüssel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_Caesar, "card2");

        MoCr_MPSub_Multiplikativ.setOpaque(false);

        MoCr_MultiplikativSub_Heading.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_MultiplikativSub_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_MultiplikativSub_Heading.setText("Multiplikative Chiffre");

        MoCr_MultiplikaitvSub_KeyPointer.setFont(new java.awt.Font("Constantia", 0, 20)); // NOI18N
        MoCr_MultiplikaitvSub_KeyPointer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_MultiplikaitvSub_KeyPointer.setText("Schlüsselzeichen");

        MoCr_MultiplikativSub_KeyField.setFont(new java.awt.Font("Constantia", 0, 20)); // NOI18N
        MoCr_MultiplikativSub_KeyField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        MoCr_MultiplikaitvSub_KeyGenButton.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_MultiplikaitvSub_KeyGenButton.setText("Schlüssel generieren");

        javax.swing.GroupLayout MoCr_MPSub_MultiplikativLayout = new javax.swing.GroupLayout(MoCr_MPSub_Multiplikativ);
        MoCr_MPSub_Multiplikativ.setLayout(MoCr_MPSub_MultiplikativLayout);
        MoCr_MPSub_MultiplikativLayout.setHorizontalGroup(
            MoCr_MPSub_MultiplikativLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_MultiplikativSub_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
            .addGroup(MoCr_MPSub_MultiplikativLayout.createSequentialGroup()
                .addComponent(MoCr_MultiplikaitvSub_KeyPointer, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_MultiplikativSub_KeyField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(192, 192, 192))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MoCr_MPSub_MultiplikativLayout.createSequentialGroup()
                .addComponent(MoCr_MultiplikaitvSub_KeyGenButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        MoCr_MPSub_MultiplikativLayout.setVerticalGroup(
            MoCr_MPSub_MultiplikativLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_MultiplikativLayout.createSequentialGroup()
                .addComponent(MoCr_MultiplikativSub_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(MoCr_MPSub_MultiplikativLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MoCr_MultiplikaitvSub_KeyPointer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_MultiplikativSub_KeyField, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_MultiplikaitvSub_KeyGenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 415, Short.MAX_VALUE))
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_Multiplikativ, "card7");

        MoCr_MPSub_Vigenere.setOpaque(false);

        MoCr_VigenereSub_Heading.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_VigenereSub_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_VigenereSub_Heading.setText("Vigenère");

        MoCr_VigenereSub_Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/graphics/karo.png"))); // NOI18N

        MoCr_VigenereSub_LabelSchlüssel.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_VigenereSub_LabelSchlüssel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        MoCr_VigenereSub_LabelSchlüssel.setText("Schlüssel:");

        MoCr_VigenereSub_EingabefeldSchlüssel.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_VigenereSub_EingabefeldSchlüssel.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout MoCr_MPSub_VigenereLayout = new javax.swing.GroupLayout(MoCr_MPSub_Vigenere);
        MoCr_MPSub_Vigenere.setLayout(MoCr_MPSub_VigenereLayout);
        MoCr_MPSub_VigenereLayout.setHorizontalGroup(
            MoCr_MPSub_VigenereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_VigenereSub_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
            .addGroup(MoCr_MPSub_VigenereLayout.createSequentialGroup()
                .addGroup(MoCr_MPSub_VigenereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, MoCr_MPSub_VigenereLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(MoCr_VigenereSub_LabelSchlüssel, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MoCr_VigenereSub_EingabefeldSchlüssel))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, MoCr_MPSub_VigenereLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(MoCr_VigenereSub_Image)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MoCr_MPSub_VigenereLayout.setVerticalGroup(
            MoCr_MPSub_VigenereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_VigenereLayout.createSequentialGroup()
                .addComponent(MoCr_VigenereSub_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_VigenereSub_Image, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(MoCr_MPSub_VigenereLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MoCr_VigenereSub_EingabefeldSchlüssel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MoCr_VigenereSub_LabelSchlüssel))
                .addGap(0, 75, Short.MAX_VALUE))
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_Vigenere, "card3");

        MoCr_MPSub_Enigma.setOpaque(false);

        MoCr_EnigmaSub_Heading.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_EnigmaSub_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_EnigmaSub_Heading.setText("Enigma");

        javax.swing.GroupLayout MoCr_MPSub_EnigmaLayout = new javax.swing.GroupLayout(MoCr_MPSub_Enigma);
        MoCr_MPSub_Enigma.setLayout(MoCr_MPSub_EnigmaLayout);
        MoCr_MPSub_EnigmaLayout.setHorizontalGroup(
            MoCr_MPSub_EnigmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_EnigmaSub_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
        );
        MoCr_MPSub_EnigmaLayout.setVerticalGroup(
            MoCr_MPSub_EnigmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_EnigmaLayout.createSequentialGroup()
                .addComponent(MoCr_EnigmaSub_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 526, Short.MAX_VALUE))
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_Enigma, "card8");

        MoCr_MPSub_OTP.setOpaque(false);

        MoCr_MPSub_OTP_Testlabel.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_MPSub_OTP_Testlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_MPSub_OTP_Testlabel.setText("One-Time-Pad");

        MoCr_OTPSub_LabelSchlüssel.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_OTPSub_LabelSchlüssel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        MoCr_OTPSub_LabelSchlüssel.setText("Schlüssel");

        MoCr_OTPSub_Area.setColumns(20);
        MoCr_OTPSub_Area.setLineWrap(true);
        MoCr_OTPSub_Area.setRows(5);
        jScrollPane1.setViewportView(MoCr_OTPSub_Area);

        MoCr_OTPSub_Generator.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_OTPSub_Generator.setText("SCHLÜSSEL GENERERIEREN");
        MoCr_OTPSub_Generator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_OTPSub_GeneratorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MoCr_MPSub_OTPLayout = new javax.swing.GroupLayout(MoCr_MPSub_OTP);
        MoCr_MPSub_OTP.setLayout(MoCr_MPSub_OTPLayout);
        MoCr_MPSub_OTPLayout.setHorizontalGroup(
            MoCr_MPSub_OTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_MPSub_OTP_Testlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(MoCr_MPSub_OTPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MoCr_MPSub_OTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MoCr_MPSub_OTPLayout.createSequentialGroup()
                        .addComponent(MoCr_OTPSub_LabelSchlüssel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(MoCr_OTPSub_Generator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        MoCr_MPSub_OTPLayout.setVerticalGroup(
            MoCr_MPSub_OTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_OTPLayout.createSequentialGroup()
                .addComponent(MoCr_MPSub_OTP_Testlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addGroup(MoCr_MPSub_OTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MoCr_OTPSub_LabelSchlüssel, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(MoCr_OTPSub_Generator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addGap(11, 11, 11))
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_OTP, "card5");

        MoCr_MPSub_Transposition.setOpaque(false);

        MoCr_TranspositionSub_Heading.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_TranspositionSub_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_TranspositionSub_Heading.setText("Transposition");

        MoCr_TranspositionMP_Grouper.add(MoCr_TranspositionSub_SpaltelButton);
        MoCr_TranspositionSub_SpaltelButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_TranspositionSub_SpaltelButton.setText("Spaltentransposition");
        MoCr_TranspositionSub_SpaltelButton.setOpaque(false);
        MoCr_TranspositionSub_SpaltelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_TranspositionSub_SpaltelButtonActionPerformed(evt);
            }
        });

        MoCr_TranspositionMP_Grouper.add(MoCr_TranspositionSub_GartenzaunButton);
        MoCr_TranspositionSub_GartenzaunButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_TranspositionSub_GartenzaunButton.setText("Gartenzaun-Transposition");
        MoCr_TranspositionSub_GartenzaunButton.setOpaque(false);
        MoCr_TranspositionSub_GartenzaunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_TranspositionSub_GartenzaunButtonActionPerformed(evt);
            }
        });

        MoCr_TranspositionMP_Grouper.add(MoCr_TranspositionSub_AnagrammButton);
        MoCr_TranspositionSub_AnagrammButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_TranspositionSub_AnagrammButton.setText("Anagramm");
        MoCr_TranspositionSub_AnagrammButton.setOpaque(false);
        MoCr_TranspositionSub_AnagrammButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_TranspositionSub_AnagrammButtonActionPerformed(evt);
            }
        });

        MoCr_TranspositionMP_Grouper.add(MoCr_TranspositionSub_DoppelwürfelButton);
        MoCr_TranspositionSub_DoppelwürfelButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_TranspositionSub_DoppelwürfelButton.setText("Doppelwürfel");
        MoCr_TranspositionSub_DoppelwürfelButton.setOpaque(false);
        MoCr_TranspositionSub_DoppelwürfelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_TranspositionSub_DoppelwürfelButtonActionPerformed(evt);
            }
        });

        MoCr_TranspositionMP_Grouper.add(MoCr_TranspositionSub_PermutaButton);
        MoCr_TranspositionSub_PermutaButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_TranspositionSub_PermutaButton.setText("Transposition über Permutationsmatrix");
        MoCr_TranspositionSub_PermutaButton.setOpaque(false);
        MoCr_TranspositionSub_PermutaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_TranspositionSub_PermutaButtonActionPerformed(evt);
            }
        });

        MoCr_TranspositionSub_KeyPanel.setOpaque(false);
        MoCr_TranspositionSub_KeyPanel.setLayout(new java.awt.CardLayout());

        MoCr_TranspositionSub_1Key.setOpaque(false);

        MoCr_TranspositionKey_1KeyLabel.setFont(new java.awt.Font("Constantia", 1, 14)); // NOI18N
        MoCr_TranspositionKey_1KeyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_TranspositionKey_1KeyLabel.setText("Schlüsselwort");

        MoCr_TranspositionKey_1KeyField.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_TranspositionKey_1KeyField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout MoCr_TranspositionSub_1KeyLayout = new javax.swing.GroupLayout(MoCr_TranspositionSub_1Key);
        MoCr_TranspositionSub_1Key.setLayout(MoCr_TranspositionSub_1KeyLayout);
        MoCr_TranspositionSub_1KeyLayout.setHorizontalGroup(
            MoCr_TranspositionSub_1KeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_TranspositionKey_1KeyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
            .addGroup(MoCr_TranspositionSub_1KeyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MoCr_TranspositionKey_1KeyField)
                .addContainerGap())
        );
        MoCr_TranspositionSub_1KeyLayout.setVerticalGroup(
            MoCr_TranspositionSub_1KeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_TranspositionSub_1KeyLayout.createSequentialGroup()
                .addComponent(MoCr_TranspositionKey_1KeyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_TranspositionKey_1KeyField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 234, Short.MAX_VALUE))
        );

        MoCr_TranspositionSub_KeyPanel.add(MoCr_TranspositionSub_1Key, "card2");

        MoCr_TranspositionSub_2Key.setOpaque(false);

        MoCr_TranspositionSub_2KeyLabel.setFont(new java.awt.Font("Constantia", 1, 14)); // NOI18N
        MoCr_TranspositionSub_2KeyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_TranspositionSub_2KeyLabel.setText("Schlüsselwörter");

        MoCr_TranspositionSub_2KeyField1.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_TranspositionSub_2KeyField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        MoCr_TranspositionSub_2KeyField2.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_TranspositionSub_2KeyField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout MoCr_TranspositionSub_2KeyLayout = new javax.swing.GroupLayout(MoCr_TranspositionSub_2Key);
        MoCr_TranspositionSub_2Key.setLayout(MoCr_TranspositionSub_2KeyLayout);
        MoCr_TranspositionSub_2KeyLayout.setHorizontalGroup(
            MoCr_TranspositionSub_2KeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_TranspositionSub_2KeyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(MoCr_TranspositionSub_2KeyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MoCr_TranspositionSub_2KeyField1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(MoCr_TranspositionSub_2KeyField2, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addContainerGap())
        );
        MoCr_TranspositionSub_2KeyLayout.setVerticalGroup(
            MoCr_TranspositionSub_2KeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_TranspositionSub_2KeyLayout.createSequentialGroup()
                .addComponent(MoCr_TranspositionSub_2KeyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(MoCr_TranspositionSub_2KeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MoCr_TranspositionSub_2KeyField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MoCr_TranspositionSub_2KeyField2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 227, Short.MAX_VALUE))
        );

        MoCr_TranspositionSub_KeyPanel.add(MoCr_TranspositionSub_2Key, "card3");

        MoCr_TranspositionSub_MatrixKey.setOpaque(false);

        MoCr_TranspositionSub_MatrixKeyLabel.setFont(new java.awt.Font("Constantia", 1, 14)); // NOI18N
        MoCr_TranspositionSub_MatrixKeyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_TranspositionSub_MatrixKeyLabel.setText("Schlüsselmatrix");

        MoCr_TranspositionSub_MatrixKeyField.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        MoCr_TranspositionSub_MatrixKeyField.setOpaque(false);
        MoCr_TranspositionSub_MatrixKeyField.getTableHeader().setReorderingAllowed(false);

        MoCr_PermSub_MinVal.setText("2");

        MoCr_PermSub_MaxVal.setText("6");

        MoCr_PermSub_Slider.setMaximum(6);
        MoCr_PermSub_Slider.setMinimum(2);
        MoCr_PermSub_Slider.setToolTipText("");
        MoCr_PermSub_Slider.setValue(4);
        MoCr_PermSub_Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                MoCr_PermSub_SliderStateChanged(evt);
            }
        });

        MoCr_PermSub_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_PermSub_Label.setText("Momentane Matrixgröße");

        MoCr_PermSub_ValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_PermSub_ValueLabel.setText("4");

        javax.swing.GroupLayout MoCr_TranspositionSub_MatrixKeyLayout = new javax.swing.GroupLayout(MoCr_TranspositionSub_MatrixKey);
        MoCr_TranspositionSub_MatrixKey.setLayout(MoCr_TranspositionSub_MatrixKeyLayout);
        MoCr_TranspositionSub_MatrixKeyLayout.setHorizontalGroup(
            MoCr_TranspositionSub_MatrixKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_TranspositionSub_MatrixKeyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
            .addGroup(MoCr_TranspositionSub_MatrixKeyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MoCr_TranspositionSub_MatrixKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MoCr_PermSub_Slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_TranspositionSub_MatrixKeyField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(MoCr_TranspositionSub_MatrixKeyLayout.createSequentialGroup()
                        .addComponent(MoCr_PermSub_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MoCr_PermSub_ValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(MoCr_TranspositionSub_MatrixKeyLayout.createSequentialGroup()
                        .addComponent(MoCr_PermSub_MinVal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MoCr_PermSub_MaxVal)))
                .addContainerGap())
        );
        MoCr_TranspositionSub_MatrixKeyLayout.setVerticalGroup(
            MoCr_TranspositionSub_MatrixKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_TranspositionSub_MatrixKeyLayout.createSequentialGroup()
                .addComponent(MoCr_TranspositionSub_MatrixKeyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_TranspositionSub_MatrixKeyField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(MoCr_TranspositionSub_MatrixKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MoCr_PermSub_MinVal)
                    .addComponent(MoCr_PermSub_MaxVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_PermSub_Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MoCr_TranspositionSub_MatrixKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MoCr_PermSub_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MoCr_PermSub_ValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        if (MoCr_TranspositionSub_MatrixKeyField.getColumnModel().getColumnCount() > 0) {
            MoCr_TranspositionSub_MatrixKeyField.getColumnModel().getColumn(0).setResizable(false);
            MoCr_TranspositionSub_MatrixKeyField.getColumnModel().getColumn(1).setResizable(false);
            MoCr_TranspositionSub_MatrixKeyField.getColumnModel().getColumn(2).setResizable(false);
        }

        MoCr_TranspositionSub_KeyPanel.add(MoCr_TranspositionSub_MatrixKey, "card4");

        MoCr_TranspositionSub_NoKey.setOpaque(false);

        javax.swing.GroupLayout MoCr_TranspositionSub_NoKeyLayout = new javax.swing.GroupLayout(MoCr_TranspositionSub_NoKey);
        MoCr_TranspositionSub_NoKey.setLayout(MoCr_TranspositionSub_NoKeyLayout);
        MoCr_TranspositionSub_NoKeyLayout.setHorizontalGroup(
            MoCr_TranspositionSub_NoKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        MoCr_TranspositionSub_NoKeyLayout.setVerticalGroup(
            MoCr_TranspositionSub_NoKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
        );

        MoCr_TranspositionSub_KeyPanel.add(MoCr_TranspositionSub_NoKey, "card5");

        javax.swing.GroupLayout MoCr_MPSub_TranspositionLayout = new javax.swing.GroupLayout(MoCr_MPSub_Transposition);
        MoCr_MPSub_Transposition.setLayout(MoCr_MPSub_TranspositionLayout);
        MoCr_MPSub_TranspositionLayout.setHorizontalGroup(
            MoCr_MPSub_TranspositionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_TranspositionSub_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(MoCr_MPSub_TranspositionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MoCr_MPSub_TranspositionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MoCr_MPSub_TranspositionLayout.createSequentialGroup()
                        .addComponent(MoCr_TranspositionSub_KeyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(MoCr_TranspositionSub_SpaltelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_TranspositionSub_GartenzaunButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_TranspositionSub_AnagrammButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_TranspositionSub_DoppelwürfelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_TranspositionSub_PermutaButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        MoCr_MPSub_TranspositionLayout.setVerticalGroup(
            MoCr_MPSub_TranspositionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_TranspositionLayout.createSequentialGroup()
                .addComponent(MoCr_TranspositionSub_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_TranspositionSub_SpaltelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_TranspositionSub_GartenzaunButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_TranspositionSub_AnagrammButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_TranspositionSub_DoppelwürfelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_TranspositionSub_PermutaButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_TranspositionSub_KeyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_Transposition, "card9");

        MoCr_MPSub_Codierungen.setOpaque(false);

        MoCr_CodierungenSub_Heading.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_CodierungenSub_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_CodierungenSub_Heading.setText("Codierungen");

        MoCr_CodierungenMp_Grouper.add(MoCr_CodierungenSub_MorseButton);
        MoCr_CodierungenSub_MorseButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_CodierungenSub_MorseButton.setText("Morse");
        MoCr_CodierungenSub_MorseButton.setOpaque(false);
        MoCr_CodierungenSub_MorseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_CodierungenSub_MorseButtonActionPerformed(evt);
            }
        });

        MoCr_CodierungenMp_Grouper.add(MoCr_CodierungenSub_ASCIIButton);
        MoCr_CodierungenSub_ASCIIButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_CodierungenSub_ASCIIButton.setText("Hexadecimalcode (ASCII)");
        MoCr_CodierungenSub_ASCIIButton.setOpaque(false);
        MoCr_CodierungenSub_ASCIIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_CodierungenSub_ASCIIButtonActionPerformed(evt);
            }
        });

        MoCr_CodierungenMp_Grouper.add(MoCr_CodierungenSub_BinärButton);
        MoCr_CodierungenSub_BinärButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_CodierungenSub_BinärButton.setText("Binärcode");
        MoCr_CodierungenSub_BinärButton.setOpaque(false);
        MoCr_CodierungenSub_BinärButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_CodierungenSub_BinärButtonActionPerformed(evt);
            }
        });

        MoCr_CodierungenMp_Grouper.add(MoCr_CodierungenSub_AlphaButton);
        MoCr_CodierungenSub_AlphaButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_CodierungenSub_AlphaButton.setText("Alphabetindex-Code");
        MoCr_CodierungenSub_AlphaButton.setOpaque(false);
        MoCr_CodierungenSub_AlphaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_CodierungenSub_AlphaButtonActionPerformed(evt);
            }
        });

        MoCr_CodierungenMp_Grouper.add(MoCr_CodierungenSub_ADFGXButton);
        MoCr_CodierungenSub_ADFGXButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_CodierungenSub_ADFGXButton.setText("ADFGX-Code");
        MoCr_CodierungenSub_ADFGXButton.setOpaque(false);
        MoCr_CodierungenSub_ADFGXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_CodierungenSub_ADFGXButtonActionPerformed(evt);
            }
        });

        MoCr_ADFGX_Matrix.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"A", null, null, null, null, null},
                {"D", null, null, null, null, null},
                {"F", null, null, null, null, null},
                {"G", null, null, null, null, null},
                {"X", null, null, null, null, null}
            },
            new String [] {
                "", "A", "D", "F", "G", "X"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MoCr_ADFGX_Matrix.setAutoscrolls(false);
        MoCr_ADFGX_Scroller.setViewportView(MoCr_ADFGX_Matrix);
        if (MoCr_ADFGX_Matrix.getColumnModel().getColumnCount() > 0) {
            MoCr_ADFGX_Matrix.getColumnModel().getColumn(0).setResizable(false);
            MoCr_ADFGX_Matrix.getColumnModel().getColumn(1).setResizable(false);
            MoCr_ADFGX_Matrix.getColumnModel().getColumn(2).setResizable(false);
            MoCr_ADFGX_Matrix.getColumnModel().getColumn(3).setResizable(false);
            MoCr_ADFGX_Matrix.getColumnModel().getColumn(4).setResizable(false);
            MoCr_ADFGX_Matrix.getColumnModel().getColumn(5).setResizable(false);
        }

        MoCr_CodierungenMp_Grouper.add(MoCr_CodierungenSub_BinToHexButton);
        MoCr_CodierungenSub_BinToHexButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_CodierungenSub_BinToHexButton.setText("Hexadecimalcode -> Binärcode");
        MoCr_CodierungenSub_BinToHexButton.setOpaque(false);
        MoCr_CodierungenSub_BinToHexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_CodierungenSub_BinToHexButtonActionPerformed(evt);
            }
        });

        MoCr_CodierungenMp_Grouper.add(MoCr_CodierungenSub_NATOButton);
        MoCr_CodierungenSub_NATOButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_CodierungenSub_NATOButton.setText("Buchstabieralphabet (NATO)");
        MoCr_CodierungenSub_NATOButton.setOpaque(false);
        MoCr_CodierungenSub_NATOButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_CodierungenSub_NATOButtonActionPerformed(evt);
            }
        });

        MoCr_CodierungenSub_ADFGXFiller.setFont(new java.awt.Font("Constantia", 1, 14)); // NOI18N
        MoCr_CodierungenSub_ADFGXFiller.setText("Ausfüllen");
        MoCr_CodierungenSub_ADFGXFiller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_CodierungenSub_ADFGXFillerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MoCr_MPSub_CodierungenLayout = new javax.swing.GroupLayout(MoCr_MPSub_Codierungen);
        MoCr_MPSub_Codierungen.setLayout(MoCr_MPSub_CodierungenLayout);
        MoCr_MPSub_CodierungenLayout.setHorizontalGroup(
            MoCr_MPSub_CodierungenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_CodierungenSub_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
            .addGroup(MoCr_MPSub_CodierungenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MoCr_MPSub_CodierungenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MoCr_CodierungenSub_BinärButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_CodierungenSub_MorseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_ADFGX_Scroller)
                    .addComponent(MoCr_CodierungenSub_ASCIIButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_CodierungenSub_AlphaButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_CodierungenSub_ADFGXButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_CodierungenSub_NATOButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(MoCr_MPSub_CodierungenLayout.createSequentialGroup()
                        .addGroup(MoCr_MPSub_CodierungenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MoCr_CodierungenSub_ADFGXFiller, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(MoCr_CodierungenSub_BinToHexButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        MoCr_MPSub_CodierungenLayout.setVerticalGroup(
            MoCr_MPSub_CodierungenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_CodierungenLayout.createSequentialGroup()
                .addComponent(MoCr_CodierungenSub_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_CodierungenSub_MorseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_CodierungenSub_ASCIIButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_CodierungenSub_BinärButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_CodierungenSub_BinToHexButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_CodierungenSub_AlphaButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_CodierungenSub_NATOButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_CodierungenSub_ADFGXButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_ADFGX_Scroller, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_CodierungenSub_ADFGXFiller, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_Codierungen, "card12");

        MoCr_MPSub_Spielsprachen.setOpaque(false);

        MoCr_SpielsprachenSub_Heading.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_SpielsprachenSub_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_SpielsprachenSub_Heading.setText("Spielsprachen");

        MoCr_SpielsprachenMP_Grouper.add(MoCr_SpielsprachenMP_BiButton);
        MoCr_SpielsprachenMP_BiButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_SpielsprachenMP_BiButton.setText("Bi-Sprache");
        MoCr_SpielsprachenMP_BiButton.setOpaque(false);
        MoCr_SpielsprachenMP_BiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_SpielsprachenMP_BiButtonActionPerformed(evt);
            }
        });

        MoCr_SpielsprachenMP_Grouper.add(MoCr_SpielsprachenMP_BobButton);
        MoCr_SpielsprachenMP_BobButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_SpielsprachenMP_BobButton.setText("Bob-Sprache");
        MoCr_SpielsprachenMP_BobButton.setOpaque(false);
        MoCr_SpielsprachenMP_BobButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_SpielsprachenMP_BobButtonActionPerformed(evt);
            }
        });

        MoCr_SpielsprachenMP_Grouper.add(MoCr_SpielsprachenMP_LöffelButton);
        MoCr_SpielsprachenMP_LöffelButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_SpielsprachenMP_LöffelButton.setText("Löffelsprache");
        MoCr_SpielsprachenMP_LöffelButton.setOpaque(false);
        MoCr_SpielsprachenMP_LöffelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_SpielsprachenMP_LöffelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MoCr_MPSub_SpielsprachenLayout = new javax.swing.GroupLayout(MoCr_MPSub_Spielsprachen);
        MoCr_MPSub_Spielsprachen.setLayout(MoCr_MPSub_SpielsprachenLayout);
        MoCr_MPSub_SpielsprachenLayout.setHorizontalGroup(
            MoCr_MPSub_SpielsprachenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_SpielsprachenSub_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
            .addGroup(MoCr_MPSub_SpielsprachenLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(MoCr_MPSub_SpielsprachenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MoCr_MPSub_SpielsprachenLayout.createSequentialGroup()
                        .addComponent(MoCr_SpielsprachenMP_BiButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(MoCr_SpielsprachenMP_BobButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_SpielsprachenMP_LöffelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        MoCr_MPSub_SpielsprachenLayout.setVerticalGroup(
            MoCr_MPSub_SpielsprachenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_SpielsprachenLayout.createSequentialGroup()
                .addComponent(MoCr_SpielsprachenSub_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_SpielsprachenMP_BiButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_SpielsprachenMP_BobButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_SpielsprachenMP_LöffelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 363, Short.MAX_VALUE))
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_Spielsprachen, "card4");

        MoCr_MPSub_Hill.setOpaque(false);

        MoCr_HillSub_Heading.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_HillSub_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_HillSub_Heading.setText("Hill-Chiffre");

        MoCr_HillSub_Matrix.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        MoCr_HillSub_Matrix.setGridColor(new java.awt.Color(0, 0, 0));
        MoCr_HillSub_Matrix.setOpaque(false);
        MoCr_HillSub_Matrix.setSelectionBackground(new java.awt.Color(255, 153, 0));
        MoCr_HillSub_Matrix.getTableHeader().setReorderingAllowed(false);

        MoCr_HillSub_Slider.setMaximum(6);
        MoCr_HillSub_Slider.setMinimum(2);
        MoCr_HillSub_Slider.setPaintTicks(true);
        MoCr_HillSub_Slider.setSnapToTicks(true);
        MoCr_HillSub_Slider.setToolTipText("");
        MoCr_HillSub_Slider.setValue(4);
        MoCr_HillSub_Slider.setOpaque(false);
        MoCr_HillSub_Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                MoCr_HillSub_SliderStateChanged(evt);
            }
        });

        MoCr_HillSub_MinLab.setText("2");

        MoCr_HillSub_MaxLab.setText("6");

        MoCr_HillSub_SizeLab.setFont(new java.awt.Font("Constantia", 1, 14)); // NOI18N
        MoCr_HillSub_SizeLab.setText("Momentane Matrixgröße");

        MoCr_HillSub_Size.setFont(new java.awt.Font("Constantia", 1, 14)); // NOI18N
        MoCr_HillSub_Size.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_HillSub_Size.setText("4");

        javax.swing.GroupLayout MoCr_MPSub_HillLayout = new javax.swing.GroupLayout(MoCr_MPSub_Hill);
        MoCr_MPSub_Hill.setLayout(MoCr_MPSub_HillLayout);
        MoCr_MPSub_HillLayout.setHorizontalGroup(
            MoCr_MPSub_HillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_HillSub_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
            .addGroup(MoCr_MPSub_HillLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MoCr_MPSub_HillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MoCr_HillSub_Matrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(MoCr_MPSub_HillLayout.createSequentialGroup()
                        .addGroup(MoCr_MPSub_HillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MoCr_HillSub_Slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(MoCr_MPSub_HillLayout.createSequentialGroup()
                                .addComponent(MoCr_HillSub_SizeLab)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MoCr_HillSub_Size, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(MoCr_MPSub_HillLayout.createSequentialGroup()
                                .addComponent(MoCr_HillSub_MinLab)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(MoCr_HillSub_MaxLab)))
                        .addContainerGap())))
        );
        MoCr_MPSub_HillLayout.setVerticalGroup(
            MoCr_MPSub_HillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_HillLayout.createSequentialGroup()
                .addComponent(MoCr_HillSub_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_HillSub_Matrix, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MoCr_MPSub_HillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MoCr_HillSub_MinLab, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MoCr_HillSub_MaxLab, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_HillSub_Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MoCr_MPSub_HillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MoCr_HillSub_SizeLab, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MoCr_HillSub_Size, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(291, Short.MAX_VALUE))
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_Hill, "card10");

        MoCr_MPSub_Steganographie.setOpaque(false);

        MoCr_SteganoSub_Heading.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_SteganoSub_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_SteganoSub_Heading.setText("Steganographische Verfahren");

        MoCr_SteganoMP_Grouper.add(MoCr_SteganoSub_BaconButton);
        MoCr_SteganoSub_BaconButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_SteganoSub_BaconButton.setText("Bacon-Chiffre");
        MoCr_SteganoSub_BaconButton.setOpaque(false);
        MoCr_SteganoSub_BaconButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_SteganoSub_BaconButtonActionPerformed(evt);
            }
        });

        MoCr_SteganoMP_Grouper.add(MoCr_SteganoSub_PseudoButton);
        MoCr_SteganoSub_PseudoButton.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_SteganoSub_PseudoButton.setText("Pseudo-Text");
        MoCr_SteganoSub_PseudoButton.setOpaque(false);
        MoCr_SteganoSub_PseudoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_SteganoSub_PseudoButtonActionPerformed(evt);
            }
        });

        MoCr_SteganoSub_BaconKeyHeading.setFont(new java.awt.Font("Constantia", 1, 20)); // NOI18N
        MoCr_SteganoSub_BaconKeyHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_SteganoSub_BaconKeyHeading.setText("Tarntext für die Bacon-Chiffre");

        MoCr_SteganoSub_BaconKey.setColumns(20);
        MoCr_SteganoSub_BaconKey.setLineWrap(true);
        MoCr_SteganoSub_BaconKey.setRows(5);
        MoCr_SteganoSub_BaconKey.setWrapStyleWord(true);
        jScrollPane4.setViewportView(MoCr_SteganoSub_BaconKey);

        javax.swing.GroupLayout MoCr_MPSub_SteganographieLayout = new javax.swing.GroupLayout(MoCr_MPSub_Steganographie);
        MoCr_MPSub_Steganographie.setLayout(MoCr_MPSub_SteganographieLayout);
        MoCr_MPSub_SteganographieLayout.setHorizontalGroup(
            MoCr_MPSub_SteganographieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_SteganoSub_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
            .addGroup(MoCr_MPSub_SteganographieLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MoCr_MPSub_SteganographieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MoCr_SteganoSub_BaconButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_SteganoSub_PseudoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_SteganoSub_BaconKeyHeading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );
        MoCr_MPSub_SteganographieLayout.setVerticalGroup(
            MoCr_MPSub_SteganographieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_SteganographieLayout.createSequentialGroup()
                .addComponent(MoCr_SteganoSub_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_SteganoSub_BaconButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_SteganoSub_PseudoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_SteganoSub_BaconKeyHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                .addContainerGap())
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_Steganographie, "card11");

        MoCr_MPSub_AffineChiffre.setOpaque(false);

        MoCr_AffiChiffSub_Heading.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_AffiChiffSub_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_AffiChiffSub_Heading.setText("Affine Chiffre");

        MoCr_AffChiffSub_KeyLabel.setFont(new java.awt.Font("Constantia", 1, 14)); // NOI18N
        MoCr_AffChiffSub_KeyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_AffChiffSub_KeyLabel.setText("Schlüsselbuchstaben");

        MoCr_AffChiffSub_Key1.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_AffChiffSub_Key1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        MoCr_AffChiffSub_Key2.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        MoCr_AffChiffSub_Key2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        MoCr_AffChiffSub_mLabel.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_AffChiffSub_mLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_AffChiffSub_mLabel.setText("m =");

        MoCr_AffChiffSub_tLabel.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_AffChiffSub_tLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_AffChiffSub_tLabel.setText("t =");

        MoCr_AffChiffSub_Functionpointer.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_AffChiffSub_Functionpointer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_AffChiffSub_Functionpointer.setText("Zuordnungsvorschrift");

        MoCr_AffChiffSub_FuncPre.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_AffChiffSub_FuncPre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_AffChiffSub_FuncPre.setText("f(x) =");

        MoCr_AffChiffSub_Function.setFont(new java.awt.Font("Constantia", 1, 18)); // NOI18N
        MoCr_AffChiffSub_Function.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout MoCr_MPSub_AffineChiffreLayout = new javax.swing.GroupLayout(MoCr_MPSub_AffineChiffre);
        MoCr_MPSub_AffineChiffre.setLayout(MoCr_MPSub_AffineChiffreLayout);
        MoCr_MPSub_AffineChiffreLayout.setHorizontalGroup(
            MoCr_MPSub_AffineChiffreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_AffiChiffSub_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(MoCr_AffChiffSub_KeyLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(MoCr_MPSub_AffineChiffreLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MoCr_MPSub_AffineChiffreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MoCr_MPSub_AffineChiffreLayout.createSequentialGroup()
                        .addGap(0, 147, Short.MAX_VALUE)
                        .addComponent(MoCr_AffChiffSub_mLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MoCr_AffChiffSub_Key1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MoCr_AffChiffSub_tLabel))
                    .addGroup(MoCr_MPSub_AffineChiffreLayout.createSequentialGroup()
                        .addComponent(MoCr_AffChiffSub_Functionpointer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MoCr_AffChiffSub_FuncPre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(MoCr_MPSub_AffineChiffreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MoCr_AffChiffSub_Key2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MoCr_AffChiffSub_Function, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        MoCr_MPSub_AffineChiffreLayout.setVerticalGroup(
            MoCr_MPSub_AffineChiffreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_AffineChiffreLayout.createSequentialGroup()
                .addComponent(MoCr_AffiChiffSub_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_AffChiffSub_KeyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MoCr_MPSub_AffineChiffreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MoCr_AffChiffSub_Key2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MoCr_AffChiffSub_Key1)
                    .addComponent(MoCr_AffChiffSub_mLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_AffChiffSub_tLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(MoCr_MPSub_AffineChiffreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MoCr_AffChiffSub_Functionpointer, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(MoCr_AffChiffSub_FuncPre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_AffChiffSub_Function, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(273, 273, 273))
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_AffineChiffre, "card12");

        MoCr_MPSub_Kryptoanalyse.setOpaque(false);

        MoCr_KryptoanalyseSub_Heading.setFont(new java.awt.Font("Constantia", 1, 28)); // NOI18N
        MoCr_KryptoanalyseSub_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MoCr_KryptoanalyseSub_Heading.setText("Kryptoanalyse");

        MoCr_KryptoanalyseSub_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Caesar", "Vigenere" }));

        javax.swing.GroupLayout MoCr_MPSub_KryptoanalyseLayout = new javax.swing.GroupLayout(MoCr_MPSub_Kryptoanalyse);
        MoCr_MPSub_Kryptoanalyse.setLayout(MoCr_MPSub_KryptoanalyseLayout);
        MoCr_MPSub_KryptoanalyseLayout.setHorizontalGroup(
            MoCr_MPSub_KryptoanalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_KryptoanalyseSub_Heading, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
            .addGroup(MoCr_MPSub_KryptoanalyseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MoCr_KryptoanalyseSub_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MoCr_MPSub_KryptoanalyseLayout.setVerticalGroup(
            MoCr_MPSub_KryptoanalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MPSub_KryptoanalyseLayout.createSequentialGroup()
                .addComponent(MoCr_KryptoanalyseSub_Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MoCr_KryptoanalyseSub_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 498, Short.MAX_VALUE))
        );

        MoCr_MainPro_changeable.add(MoCr_MPSub_Kryptoanalyse, "card13");

        javax.swing.GroupLayout MoCr_MainPro_cardPanelLayout = new javax.swing.GroupLayout(MoCr_MainPro_cardPanel);
        MoCr_MainPro_cardPanel.setLayout(MoCr_MainPro_cardPanelLayout);
        MoCr_MainPro_cardPanelLayout.setHorizontalGroup(
            MoCr_MainPro_cardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_MainPro_cardPanelLayout.createSequentialGroup()
                .addComponent(MoCr_MainPro_static_IOpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_MainPro_changeable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MoCr_MainPro_cardPanelLayout.setVerticalGroup(
            MoCr_MainPro_cardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_MainPro_static_IOpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(MoCr_MainPro_changeable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        MoCr_Gen_DynamicPanel.add(MoCr_MainPro_cardPanel, "card3");

        MoCr_Did_Returnerbutton.setText("Zurück zum Hauptprogramm");
        MoCr_Did_Returnerbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_Did_ReturnerbuttonActionPerformed(evt);
            }
        });

        MoCr_Did_HTMLView.setEditable(false);
        MoCr_Did_HTMLView.setContentType("text/html"); // NOI18N
        MoCr_Did_Scrollpanel.setViewportView(MoCr_Did_HTMLView);

        javax.swing.GroupLayout MoCr_Did_cardPanelLayout = new javax.swing.GroupLayout(MoCr_Did_cardPanel);
        MoCr_Did_cardPanel.setLayout(MoCr_Did_cardPanelLayout);
        MoCr_Did_cardPanelLayout.setHorizontalGroup(
            MoCr_Did_cardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MoCr_Did_cardPanelLayout.createSequentialGroup()
                .addGap(345, 345, 345)
                .addComponent(MoCr_Did_Returnerbutton, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
            .addComponent(MoCr_Did_Scrollpanel)
        );
        MoCr_Did_cardPanelLayout.setVerticalGroup(
            MoCr_Did_cardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MoCr_Did_cardPanelLayout.createSequentialGroup()
                .addComponent(MoCr_Did_Scrollpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_Did_Returnerbutton))
        );

        MoCr_Gen_DynamicPanel.add(MoCr_Did_cardPanel, "card2");

        MoCr_Gen_ListPanel.setLayout(new java.awt.CardLayout());

        MoCr_Gen_Sidelister.setFont(new java.awt.Font("Constantia", 0, 12)); // NOI18N
        MoCr_Gen_Sidelister.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Caesar", "Multiplikativ", "Vigenere", "Enigma", "One-Time-Pad", "Transposition", "Codierungen", "Spielsprachen", "Hill", "Steganographie", "Affine Chiffre", "Kryptoanalyse" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        MoCr_Gen_Sidelister.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        MoCr_Gen_Sidelister.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        MoCr_Gen_Sidelister.setName(""); // NOI18N
        MoCr_Gen_Sidelister.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MoCr_Gen_SidelisterMousePressed(evt);
            }
        });
        MoCr_Gen_Sidelist.setViewportView(MoCr_Gen_Sidelister);

        MoCr_MPButtonpanel_Crypter.setBackground(new java.awt.Color(255, 255, 255));
        MoCr_MPButtonpanel_Crypter.setFont(new java.awt.Font("Constantia", 0, 12)); // NOI18N
        MoCr_MPButtonpanel_Crypter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/graphics/Angepasstes geschlossenes Schloss.png"))); // NOI18N
        MoCr_MPButtonpanel_Crypter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_MPButtonpanel_CrypterActionPerformed(evt);
            }
        });

        MoCr_MPButtonpanel_Decrypter.setBackground(new java.awt.Color(255, 255, 255));
        MoCr_MPButtonpanel_Decrypter.setFont(new java.awt.Font("Constantia", 0, 12)); // NOI18N
        MoCr_MPButtonpanel_Decrypter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/graphics/Angepasstes geschlossenes Schloss 2.png"))); // NOI18N
        MoCr_MPButtonpanel_Decrypter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_MPButtonpanel_DecrypterActionPerformed(evt);
            }
        });

        MoCr_MPButtonpanel_LearnButton.setFont(new java.awt.Font("Constantia", 0, 12)); // NOI18N
        MoCr_MPButtonpanel_LearnButton.setText("Lernen");
        MoCr_MPButtonpanel_LearnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_MPButtonpanel_LearnButtonActionPerformed(evt);
            }
        });

        MoCr_MPButtonpanel_ExerciseButton.setFont(new java.awt.Font("Constantia", 0, 12)); // NOI18N
        MoCr_MPButtonpanel_ExerciseButton.setText("Üben");
        MoCr_MPButtonpanel_ExerciseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_MPButtonpanel_ExerciseButtonActionPerformed(evt);
            }
        });

        MoCr_MPButtonpanel_IOChange.setFont(new java.awt.Font("Constantia", 0, 12)); // NOI18N
        MoCr_MPButtonpanel_IOChange.setText("Eingabe wechseln");
        MoCr_MPButtonpanel_IOChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoCr_MPButtonpanel_IOChangeActionPerformed(evt);
            }
        });

        jButton1.setText("Hilfe anzeigen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MoCr_GenDyn_MainProListLayout = new javax.swing.GroupLayout(MoCr_GenDyn_MainProList);
        MoCr_GenDyn_MainProList.setLayout(MoCr_GenDyn_MainProListLayout);
        MoCr_GenDyn_MainProListLayout.setHorizontalGroup(
            MoCr_GenDyn_MainProListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_Gen_Sidelist)
            .addComponent(MoCr_MPButtonpanel_IOChange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MoCr_GenDyn_MainProListLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(MoCr_MPButtonpanel_Crypter, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_MPButtonpanel_Decrypter, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(MoCr_MPButtonpanel_LearnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(MoCr_MPButtonpanel_ExerciseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        MoCr_GenDyn_MainProListLayout.setVerticalGroup(
            MoCr_GenDyn_MainProListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_GenDyn_MainProListLayout.createSequentialGroup()
                .addComponent(MoCr_Gen_Sidelist, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MoCr_GenDyn_MainProListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MoCr_MPButtonpanel_Decrypter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoCr_MPButtonpanel_Crypter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_MPButtonpanel_LearnButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_MPButtonpanel_ExerciseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_MPButtonpanel_IOChange)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        MoCr_Gen_ListPanel.add(MoCr_GenDyn_MainProList, "card3");

        MoCr_Gen_DidLister.setFont(new java.awt.Font("Constantia", 0, 11)); // NOI18N
        MoCr_Gen_DidLister.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Mathematik", "Steganographie", "Spielsprachen", "Kryptologie", "Kryptoanalyse", "Kryptographie", "Assymetrisch", "RSA", "End-to-End", "Symmetrisch", "Transposition", "Substitution", "Codierung", "Chiffrierung", "Monoalphabetisch", "Caesar", "Multiplikativ", "Polyalphabetisch", "Vigenere", "Enigma", "One-Time-Pad", "Hill", "Affine Chiffre" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        MoCr_Gen_DidLister.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        MoCr_Gen_DidLister.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MoCr_Gen_DidListerMousePressed(evt);
            }
        });
        MoCr_Gen_DidList.setViewportView(MoCr_Gen_DidLister);

        javax.swing.GroupLayout MoCr_GenDyn_DidListPanelLayout = new javax.swing.GroupLayout(MoCr_GenDyn_DidListPanel);
        MoCr_GenDyn_DidListPanel.setLayout(MoCr_GenDyn_DidListPanelLayout);
        MoCr_GenDyn_DidListPanelLayout.setHorizontalGroup(
            MoCr_GenDyn_DidListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MoCr_GenDyn_DidListPanelLayout.createSequentialGroup()
                .addComponent(MoCr_Gen_DidList, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        MoCr_GenDyn_DidListPanelLayout.setVerticalGroup(
            MoCr_GenDyn_DidListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_Gen_DidList, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        );

        MoCr_Gen_ListPanel.add(MoCr_GenDyn_DidListPanel, "card3");

        MoCr_Gen_Choicemenu1.setText("Einstellung");
        MoCr_Gen_Choicemenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MoCr_Gen_Choicemenu1MouseClicked(evt);
            }
        });
        MoCr_Gen_Choicebar.add(MoCr_Gen_Choicemenu1);

        MoCr_Gen_Choicemenu2.setText("Impressum");
        MoCr_Gen_Choicemenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MoCr_Gen_Choicemenu2MouseClicked(evt);
            }
        });
        MoCr_Gen_Choicebar.add(MoCr_Gen_Choicemenu2);

        setJMenuBar(MoCr_Gen_Choicebar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(MoCr_Gen_DynamicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoCr_Gen_ListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoCr_Gen_DynamicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(MoCr_Gen_ListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private javax.swing.JPanel getValidChiffrePanel(int z) {
        javax.swing.JPanel n = null;
        switch(z) {
            case 0: n = MoCr_MPSub_Caesar;
                    localLogic.setIdentificationPair(0, 0);     break;
            case 1: n = MoCr_MPSub_Multiplikativ;
                    localLogic.setIdentificationPair(1, 0);     break;
            case 2:  n = MoCr_MPSub_Vigenere;
                    localLogic.setIdentificationPair(2, 0);     break;
            case 3: n = MoCr_MPSub_Enigma;
                    localLogic.setIdentificationPair(0, 2);     break;
            case 4: n = MoCr_MPSub_OTP;
                    localLogic.setIdentificationPair(3, 0);     break;
            case 5: n = MoCr_MPSub_Transposition;        
                    MoCr_TranspositionSub_SpaltelButton.setSelected(true); 
                    changeTranspositionKeyPanel(0);
                    localLogic.setIdentificationPair(4, 0);     break;
            case 6: n = MoCr_MPSub_Codierungen;       
                    MoCr_CodierungenSub_MorseButton.setSelected(true);
                    localLogic.setIdentificationPair(1, 1);     break;
            case 7: n = MoCr_MPSub_Spielsprachen;  
                    MoCr_SpielsprachenMP_BiButton.setSelected(true);
                    localLogic.setIdentificationPair(5, 1);     break;
            case 8: n = MoCr_MPSub_Hill;
                    localLogic.setIdentificationPair(7, 0);     break;
            case 9: n = MoCr_MPSub_Steganographie;    
                    MoCr_SteganoSub_BaconButton.setSelected(true); 
                    localLogic.setIdentificationPair(9, 0);     break;
            case 10:n = MoCr_MPSub_AffineChiffre;
                    localLogic.setIdentificationPair(10, 0);     break;
            case 11:n = MoCr_MPSub_Kryptoanalyse;
                    localLogic.setIdentificationPair(-1, -1);     break;
        }
        return n;
    }
   
    private void MoCr_MPButtonpanel_LearnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_MPButtonpanel_LearnButtonActionPerformed
        // TODO add your handling code here:    
        localTools.adjustCards(MoCr_Gen_DynamicPanel, MoCr_Did_cardPanel);
        localTools.adjustCards(MoCr_Gen_ListPanel, MoCr_GenDyn_DidListPanel);
        localLogic.setMode(false);
    }//GEN-LAST:event_MoCr_MPButtonpanel_LearnButtonActionPerformed

    private void MoCr_Did_ReturnerbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_Did_ReturnerbuttonActionPerformed
        // TODO add your handling code here:
        localTools.adjustCards(MoCr_Gen_DynamicPanel, MoCr_MainPro_cardPanel);        
        localTools.adjustCards(MoCr_MainPro_changeable, getValidChiffrePanel(localLogic.getState()) );
        localTools.adjustCards(MoCr_Gen_ListPanel, MoCr_GenDyn_MainProList);       
        localLogic.setMode(true);
    }//GEN-LAST:event_MoCr_Did_ReturnerbuttonActionPerformed

    private void MoCr_Gen_Choicemenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MoCr_Gen_Choicemenu2MouseClicked
        // TODO add your handling code here:
        localCredits.setVisible(true);      
    }//GEN-LAST:event_MoCr_Gen_Choicemenu2MouseClicked
    
    private void MoCr_MPButtonpanel_CrypterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_MPButtonpanel_CrypterActionPerformed
        // TODO add your handling code here:
        String in = MoCr_MPstaticIO_InField.getText();  //Eingabe wird ausgelesen
        MoCr_MPstaticIO_OutField.setText(""); //Ausgabe wird geleert
        String out = "";
        int e = localLogic.getencryptionType();
        int c = localLogic.getChiffrestate();
        
        switch(e) {
            case 0: String k = "";  //für Chiffren gilt: 1 Schlüssel                  
                switch(c) {
                    case 0: k = MoCr_Caesar_EingabefeldSchlüssel.getText(); break;
                    case 1: k = MoCr_MultiplikativSub_KeyField.getText(); break;
                    case 2: k = MoCr_VigenereSub_EingabefeldSchlüssel.getText(); break;
                    case 3: k = MoCr_OTPSub_Area.getText(); break;
                    case 4: k = MoCr_TranspositionKey_1KeyField.getText(); break;
                    case 5: k = MoCr_TranspositionKey_1KeyField.getText(); break;
                    case 6: k = localLogic.dismantleJTable(MoCr_ADFGX_Matrix, 1); break;
                    case 7: k = localLogic.dismantleJTable(MoCr_HillSub_Matrix, 0); break;
                    case 8: k = localLogic.dismantleJTable(MoCr_TranspositionSub_MatrixKeyField, 0); break;                       
                    case 9: k = MoCr_SteganoSub_BaconKey.getText(); break;
                    case 10:    String k1 = MoCr_AffChiffSub_Key1.getText();
                                String k2 = MoCr_AffChiffSub_Key2.getText();
                                k = new StringBuffer(k1).append(k2).toString(); 
                                MoCr_AffChiffSub_Function.setText(localLogic.createFunction(k));   break;
                }
                out = localCore.verschlüsseln(c, in, k);    break;
            case 1: out = localCore.spielsprache_verschlüsseln(c, in);
        }
        MoCr_MPstaticIO_OutField.setText(out);        
    }//GEN-LAST:event_MoCr_MPButtonpanel_CrypterActionPerformed
      
    private void MoCr_MPButtonpanel_DecrypterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_MPButtonpanel_DecrypterActionPerformed
        // TODO add your handling code here:
        String in = MoCr_MPstaticIO_InField.getText();  //Eingabe wird ausgelesen
        MoCr_MPstaticIO_OutField.setText(""); //Ausgabe wird geleert
        String out = "";
        int e = localLogic.getencryptionType();
        int c = localLogic.getChiffrestate();
        
        switch(e) {
            case 0: String k = "";  //für Chiffren gilt: 1 Schlüssel                  
                switch(c) {
                    case 0: k = MoCr_Caesar_EingabefeldSchlüssel.getText(); break;
                    case 1: k = MoCr_MultiplikativSub_KeyField.getText(); break;
                    case 2: k = MoCr_VigenereSub_EingabefeldSchlüssel.getText(); break;
                    case 3: k = MoCr_OTPSub_Area.getText(); break;
                    case 4: k = MoCr_TranspositionKey_1KeyField.getText(); break;
                    case 5: k = MoCr_TranspositionKey_1KeyField.getText(); break;
                    case 6: k = localLogic.dismantleJTable(MoCr_ADFGX_Matrix, 1); break;
                    case 7: k = localLogic.dismantleJTable(MoCr_HillSub_Matrix, 0); break;
                    case 8: k = localLogic.dismantleJTable(MoCr_TranspositionSub_MatrixKeyField, 0); break;
                    case 9: k = MoCr_SteganoSub_BaconKey.getText(); break;
                    case 10:    String k1 = MoCr_AffChiffSub_Key1.getText();
                                String k2 = MoCr_AffChiffSub_Key2.getText();
                            k = new StringBuffer(k1).append(k2).toString(); break;
                }
                out = localCore.entschlüsseln(c, in, k);    break;
            case 1: out = localCore.spielsprache_entschlüsseln(c, in);
        }
        MoCr_MPstaticIO_OutField.setText(out);        
    }//GEN-LAST:event_MoCr_MPButtonpanel_DecrypterActionPerformed
    
    private void MoCr_MPButtonpanel_IOChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_MPButtonpanel_IOChangeActionPerformed
        // TODO add your handling code here:
        String changetext = MoCr_MPstaticIO_OutField.getText();
        if(changetext.length() > 0) {
            MoCr_MPstaticIO_InField.setText(changetext);
            MoCr_MPstaticIO_OutField.setText("");
        }            
    }//GEN-LAST:event_MoCr_MPButtonpanel_IOChangeActionPerformed

    private void MoCr_OTPSub_GeneratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_OTPSub_GeneratorActionPerformed
        // TODO add your handling code here:
        String in = MoCr_MPstaticIO_InField.getText();
        int l = in.length();
        String nk = localTools.generateNormalKey(l);
        MoCr_OTPSub_Area.setText(nk);        
    }//GEN-LAST:event_MoCr_OTPSub_GeneratorActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        localSupport.refreshSupport();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void MoCr_CodierungenSub_ADFGXFillerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_CodierungenSub_ADFGXFillerActionPerformed
        // TODO add your handling code here:
        String seq = localLogic.ADFGX_SpecialCheck(MoCr_ADFGX_Matrix);
        String out = localTools.fillTable(seq);
        localLogic.writeTable(MoCr_ADFGX_Matrix, out);        
    }//GEN-LAST:event_MoCr_CodierungenSub_ADFGXFillerActionPerformed

    private void MoCr_MPButtonpanel_ExerciseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_MPButtonpanel_ExerciseButtonActionPerformed
        // TODO add your handling code here:
        localExc.refresh(localLogic.getState());
    }//GEN-LAST:event_MoCr_MPButtonpanel_ExerciseButtonActionPerformed

    private void MoCr_Gen_Choicemenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MoCr_Gen_Choicemenu1MouseClicked
        // TODO add your handling code here:
        localSettings.renew();
    }//GEN-LAST:event_MoCr_Gen_Choicemenu1MouseClicked

    private void MoCr_Gen_SidelisterMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MoCr_Gen_SidelisterMousePressed
        // TODO add your handling code here:
        localLogic.setSwitchState(MoCr_Gen_Sidelister.getSelectedIndex());
        localTools.adjustCards(MoCr_MainPro_changeable, getValidChiffrePanel(localLogic.getState())); 
        localDidViewer.insertHTML(localLogic.getState(), true);
    }//GEN-LAST:event_MoCr_Gen_SidelisterMousePressed

    private void MoCr_Gen_DidListerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MoCr_Gen_DidListerMousePressed
        // TODO add your handling code here:
        localDidViewer.insertHTML(MoCr_Gen_DidLister.getSelectedIndex(), false);
    }//GEN-LAST:event_MoCr_Gen_DidListerMousePressed

    private void MoCr_SpielsprachenMP_BiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_SpielsprachenMP_BiButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(5, 1);
    }//GEN-LAST:event_MoCr_SpielsprachenMP_BiButtonActionPerformed

    private void MoCr_SpielsprachenMP_BobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_SpielsprachenMP_BobButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(6, 1);
    }//GEN-LAST:event_MoCr_SpielsprachenMP_BobButtonActionPerformed

    private void MoCr_SpielsprachenMP_LöffelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_SpielsprachenMP_LöffelButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(7, 1);
    }//GEN-LAST:event_MoCr_SpielsprachenMP_LöffelButtonActionPerformed

    private void MoCr_SteganoSub_BaconButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_SteganoSub_BaconButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(9, 0);
    }//GEN-LAST:event_MoCr_SteganoSub_BaconButtonActionPerformed

    private void MoCr_SteganoSub_PseudoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_SteganoSub_PseudoButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(10, 1);
    }//GEN-LAST:event_MoCr_SteganoSub_PseudoButtonActionPerformed

    private void MoCr_TranspositionSub_SpaltelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_TranspositionSub_SpaltelButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(4, 0);
        changeTranspositionKeyPanel(0);
    }//GEN-LAST:event_MoCr_TranspositionSub_SpaltelButtonActionPerformed

    private void MoCr_TranspositionSub_GartenzaunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_TranspositionSub_GartenzaunButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(5, 0);
        changeTranspositionKeyPanel(0);
    }//GEN-LAST:event_MoCr_TranspositionSub_GartenzaunButtonActionPerformed

    private void MoCr_TranspositionSub_AnagrammButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_TranspositionSub_AnagrammButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(0, 1);
        changeTranspositionKeyPanel(-1);
    }//GEN-LAST:event_MoCr_TranspositionSub_AnagrammButtonActionPerformed

    private void MoCr_TranspositionSub_DoppelwürfelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_TranspositionSub_DoppelwürfelButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(0, 2);
        changeTranspositionKeyPanel(1);
    }//GEN-LAST:event_MoCr_TranspositionSub_DoppelwürfelButtonActionPerformed

    private void MoCr_TranspositionSub_PermutaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_TranspositionSub_PermutaButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(8, 0);
        changeTranspositionKeyPanel(2);
    }//GEN-LAST:event_MoCr_TranspositionSub_PermutaButtonActionPerformed

    private void MoCr_CodierungenSub_MorseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_CodierungenSub_MorseButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(1, 1);
    }//GEN-LAST:event_MoCr_CodierungenSub_MorseButtonActionPerformed

    private void MoCr_CodierungenSub_ASCIIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_CodierungenSub_ASCIIButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(2, 1);
    }//GEN-LAST:event_MoCr_CodierungenSub_ASCIIButtonActionPerformed

    private void MoCr_CodierungenSub_BinärButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_CodierungenSub_BinärButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(3, 1);
    }//GEN-LAST:event_MoCr_CodierungenSub_BinärButtonActionPerformed

    private void MoCr_CodierungenSub_BinToHexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_CodierungenSub_BinToHexButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(8, 1);
    }//GEN-LAST:event_MoCr_CodierungenSub_BinToHexButtonActionPerformed

    private void MoCr_CodierungenSub_AlphaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_CodierungenSub_AlphaButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(4, 1);
    }//GEN-LAST:event_MoCr_CodierungenSub_AlphaButtonActionPerformed

    private void MoCr_CodierungenSub_NATOButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_CodierungenSub_NATOButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(9, 1);
    }//GEN-LAST:event_MoCr_CodierungenSub_NATOButtonActionPerformed

    private void MoCr_CodierungenSub_ADFGXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoCr_CodierungenSub_ADFGXButtonActionPerformed
        // TODO add your handling code here:
        localLogic.setIdentificationPair(6, 0);
    }//GEN-LAST:event_MoCr_CodierungenSub_ADFGXButtonActionPerformed

    private void MoCr_HillSub_SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_MoCr_HillSub_SliderStateChanged
        // TODO add your handling code here:
        int t = MoCr_HillSub_Slider.getValue();
        localLogic.alterJTable(MoCr_HillSub_Matrix, t);
        MoCr_HillSub_Size.setText(Integer.toString(t));
    }//GEN-LAST:event_MoCr_HillSub_SliderStateChanged

    private void MoCr_PermSub_SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_MoCr_PermSub_SliderStateChanged
        // TODO add your handling code here:
        int t = MoCr_PermSub_Slider.getValue();
        localLogic.alterJTable(MoCr_TranspositionSub_MatrixKeyField, t);
        MoCr_PermSub_ValueLabel.setText(Integer.toString(t));
    }//GEN-LAST:event_MoCr_PermSub_SliderStateChanged
        
    private void changeTranspositionKeyPanel(int i) {
        javax.swing.JPanel l = null;
            switch(i) {
                case -1: l = MoCr_TranspositionSub_NoKey; break;
                case 0: l = MoCr_TranspositionSub_1Key; break;
                case 1: l = MoCr_TranspositionSub_2Key; break;
                case 2: l = MoCr_TranspositionSub_MatrixKey; break;
            }
        localTools.adjustCards(MoCr_TranspositionSub_KeyPanel, l);
    }
    
    public void clearAll() {
        clearIO();
        clearKeys();
    }
    
    public void clearLocal() {
        clearKeys(localLogic.getState());
    }
    
    public void clearKeys() {
        for(int i = 0; i <= 10; i++) {
            clearKeys(i);
        }
    }
    public void clearKeys(int p) {
        switch(p) {
            case 0: MoCr_Caesar_EingabefeldSchlüssel.setText(""); break;
            case 1: MoCr_MultiplikativSub_KeyField.setText(""); break;
            case 2: MoCr_VigenereSub_EingabefeldSchlüssel.setText(""); break;
            case 3: break;
            case 4: MoCr_OTPSub_Area.setText("");
            case 5: MoCr_TranspositionKey_1KeyField.setText("");
                    MoCr_TranspositionSub_2KeyField1.setText("");
                    MoCr_TranspositionSub_2KeyField2.setText("");
                    localLogic.clearTable(MoCr_TranspositionSub_MatrixKeyField, 0); break;
            case 6: localLogic.clearTable(MoCr_ADFGX_Matrix, 1); break;
            case 7: break;
            case 8: localLogic.clearTable(MoCr_HillSub_Matrix, 0); break;
            case 9: MoCr_SteganoSub_BaconKey.setText(""); break;
            case 10:MoCr_AffChiffSub_Key1.setText("");
                    MoCr_AffChiffSub_Key2.setText(""); break;
            case 11: break;
        }
    }

    public void clearIO() {
        MoCr_MPstaticIO_InField.setText("");
        MoCr_MPstaticIO_OutField.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MoCr_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MoCr_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MoCr_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MoCr_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MoCr_Frame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MoCr_ADFGX_Matrix;
    private javax.swing.JScrollPane MoCr_ADFGX_Scroller;
    private javax.swing.JLabel MoCr_AffChiffSub_FuncPre;
    private javax.swing.JLabel MoCr_AffChiffSub_Function;
    private javax.swing.JLabel MoCr_AffChiffSub_Functionpointer;
    private javax.swing.JTextField MoCr_AffChiffSub_Key1;
    private javax.swing.JTextField MoCr_AffChiffSub_Key2;
    private javax.swing.JLabel MoCr_AffChiffSub_KeyLabel;
    private javax.swing.JLabel MoCr_AffChiffSub_mLabel;
    private javax.swing.JLabel MoCr_AffChiffSub_tLabel;
    private javax.swing.JLabel MoCr_AffiChiffSub_Heading;
    private javax.swing.JLabel MoCr_CaesarSub_DiscBack;
    private javax.swing.JLabel MoCr_CaesarSub_Heading;
    private javax.swing.JLabel MoCr_CaesarSub_LabelSchlüssel;
    private javax.swing.JTextField MoCr_Caesar_EingabefeldSchlüssel;
    private javax.swing.ButtonGroup MoCr_CodierungenMp_Grouper;
    private javax.swing.JRadioButton MoCr_CodierungenSub_ADFGXButton;
    private javax.swing.JButton MoCr_CodierungenSub_ADFGXFiller;
    private javax.swing.JRadioButton MoCr_CodierungenSub_ASCIIButton;
    private javax.swing.JRadioButton MoCr_CodierungenSub_AlphaButton;
    private javax.swing.JRadioButton MoCr_CodierungenSub_BinToHexButton;
    private javax.swing.JRadioButton MoCr_CodierungenSub_BinärButton;
    private javax.swing.JLabel MoCr_CodierungenSub_Heading;
    private javax.swing.JRadioButton MoCr_CodierungenSub_MorseButton;
    private javax.swing.JRadioButton MoCr_CodierungenSub_NATOButton;
    private javax.swing.JEditorPane MoCr_Did_HTMLView;
    private javax.swing.JButton MoCr_Did_Returnerbutton;
    private javax.swing.JScrollPane MoCr_Did_Scrollpanel;
    private javax.swing.JPanel MoCr_Did_cardPanel;
    private javax.swing.JLabel MoCr_EnigmaSub_Heading;
    private javax.swing.JPanel MoCr_GenDyn_DidListPanel;
    private javax.swing.JPanel MoCr_GenDyn_MainProList;
    private javax.swing.JMenuBar MoCr_Gen_Choicebar;
    private javax.swing.JMenu MoCr_Gen_Choicemenu1;
    private javax.swing.JMenu MoCr_Gen_Choicemenu2;
    private javax.swing.JScrollPane MoCr_Gen_DidList;
    private javax.swing.JList<String> MoCr_Gen_DidLister;
    private javax.swing.JPanel MoCr_Gen_DynamicPanel;
    private javax.swing.JPanel MoCr_Gen_ListPanel;
    private javax.swing.JScrollPane MoCr_Gen_Sidelist;
    private javax.swing.JList<String> MoCr_Gen_Sidelister;
    private javax.swing.JLabel MoCr_HillSub_Heading;
    private javax.swing.JTable MoCr_HillSub_Matrix;
    private javax.swing.JLabel MoCr_HillSub_MaxLab;
    private javax.swing.JLabel MoCr_HillSub_MinLab;
    private javax.swing.JLabel MoCr_HillSub_Size;
    private javax.swing.JLabel MoCr_HillSub_SizeLab;
    private javax.swing.JSlider MoCr_HillSub_Slider;
    private javax.swing.JComboBox<String> MoCr_KryptoanalyseSub_ComboBox;
    private javax.swing.JLabel MoCr_KryptoanalyseSub_Heading;
    private javax.swing.JButton MoCr_MPButtonpanel_Crypter;
    private javax.swing.JButton MoCr_MPButtonpanel_Decrypter;
    private javax.swing.JButton MoCr_MPButtonpanel_ExerciseButton;
    private javax.swing.JButton MoCr_MPButtonpanel_IOChange;
    private javax.swing.JButton MoCr_MPButtonpanel_LearnButton;
    private javax.swing.JPanel MoCr_MPSub_AffineChiffre;
    private javax.swing.JPanel MoCr_MPSub_Caesar;
    private javax.swing.JPanel MoCr_MPSub_Codierungen;
    private javax.swing.JPanel MoCr_MPSub_Enigma;
    private javax.swing.JPanel MoCr_MPSub_Hill;
    private javax.swing.JPanel MoCr_MPSub_Kryptoanalyse;
    private javax.swing.JPanel MoCr_MPSub_Multiplikativ;
    private javax.swing.JPanel MoCr_MPSub_OTP;
    private javax.swing.JLabel MoCr_MPSub_OTP_Testlabel;
    private javax.swing.JPanel MoCr_MPSub_Spielsprachen;
    private javax.swing.JPanel MoCr_MPSub_Steganographie;
    private javax.swing.JPanel MoCr_MPSub_Transposition;
    private javax.swing.JPanel MoCr_MPSub_Vigenere;
    private javax.swing.JLabel MoCr_MPstaticIO_Heading;
    private javax.swing.JTextArea MoCr_MPstaticIO_InField;
    private javax.swing.JLabel MoCr_MPstaticIO_InHeading;
    private javax.swing.JTextArea MoCr_MPstaticIO_OutField;
    private javax.swing.JLabel MoCr_MPstaticIO_OutHeading;
    private javax.swing.JScrollPane MoCr_MPstaticIO_ScrollerIn;
    private javax.swing.JScrollPane MoCr_MPstaticIO_ScrollerOut;
    private javax.swing.JPanel MoCr_MainPro_cardPanel;
    private javax.swing.JPanel MoCr_MainPro_changeable;
    private javax.swing.JPanel MoCr_MainPro_static_IOpanel;
    private javax.swing.JButton MoCr_MultiplikaitvSub_KeyGenButton;
    private javax.swing.JLabel MoCr_MultiplikaitvSub_KeyPointer;
    private javax.swing.JLabel MoCr_MultiplikativSub_Heading;
    private javax.swing.JTextField MoCr_MultiplikativSub_KeyField;
    private javax.swing.JTextArea MoCr_OTPSub_Area;
    private javax.swing.JButton MoCr_OTPSub_Generator;
    private javax.swing.JLabel MoCr_OTPSub_LabelSchlüssel;
    private javax.swing.JLabel MoCr_PermSub_Label;
    private javax.swing.JLabel MoCr_PermSub_MaxVal;
    private javax.swing.JLabel MoCr_PermSub_MinVal;
    private javax.swing.JSlider MoCr_PermSub_Slider;
    private javax.swing.JLabel MoCr_PermSub_ValueLabel;
    private javax.swing.JRadioButton MoCr_SpielsprachenMP_BiButton;
    private javax.swing.JRadioButton MoCr_SpielsprachenMP_BobButton;
    private javax.swing.ButtonGroup MoCr_SpielsprachenMP_Grouper;
    private javax.swing.JRadioButton MoCr_SpielsprachenMP_LöffelButton;
    private javax.swing.JLabel MoCr_SpielsprachenSub_Heading;
    private javax.swing.ButtonGroup MoCr_SteganoMP_Grouper;
    private javax.swing.JRadioButton MoCr_SteganoSub_BaconButton;
    private javax.swing.JTextArea MoCr_SteganoSub_BaconKey;
    private javax.swing.JLabel MoCr_SteganoSub_BaconKeyHeading;
    private javax.swing.JLabel MoCr_SteganoSub_Heading;
    private javax.swing.JRadioButton MoCr_SteganoSub_PseudoButton;
    private javax.swing.JTextField MoCr_TranspositionKey_1KeyField;
    private javax.swing.JLabel MoCr_TranspositionKey_1KeyLabel;
    private javax.swing.ButtonGroup MoCr_TranspositionMP_Grouper;
    private javax.swing.JPanel MoCr_TranspositionSub_1Key;
    private javax.swing.JPanel MoCr_TranspositionSub_2Key;
    private javax.swing.JTextField MoCr_TranspositionSub_2KeyField1;
    private javax.swing.JTextField MoCr_TranspositionSub_2KeyField2;
    private javax.swing.JLabel MoCr_TranspositionSub_2KeyLabel;
    private javax.swing.JRadioButton MoCr_TranspositionSub_AnagrammButton;
    private javax.swing.JRadioButton MoCr_TranspositionSub_DoppelwürfelButton;
    private javax.swing.JRadioButton MoCr_TranspositionSub_GartenzaunButton;
    private javax.swing.JLabel MoCr_TranspositionSub_Heading;
    private javax.swing.JPanel MoCr_TranspositionSub_KeyPanel;
    private javax.swing.JPanel MoCr_TranspositionSub_MatrixKey;
    private javax.swing.JTable MoCr_TranspositionSub_MatrixKeyField;
    private javax.swing.JLabel MoCr_TranspositionSub_MatrixKeyLabel;
    private javax.swing.JPanel MoCr_TranspositionSub_NoKey;
    private javax.swing.JRadioButton MoCr_TranspositionSub_PermutaButton;
    private javax.swing.JRadioButton MoCr_TranspositionSub_SpaltelButton;
    private javax.swing.JTextField MoCr_VigenereSub_EingabefeldSchlüssel;
    private javax.swing.JLabel MoCr_VigenereSub_Heading;
    private javax.swing.JLabel MoCr_VigenereSub_Image;
    private javax.swing.JLabel MoCr_VigenereSub_LabelSchlüssel;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
